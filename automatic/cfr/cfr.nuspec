<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <!-- == PACKAGE SPECIFIC SECTION == -->
    <id>cfr</id>
    <version>0.139</version>
    <packageSourceUrl>https://github.com/franklinyu/chocolatey-packages/tree/master/automatic/cfr</packageSourceUrl>
    <owners>Franklin Yu</owners>
    <!-- ============================== -->

    <!-- == SOFTWARE SPECIFIC SECTION == -->
    <title>CFR</title>
    <authors>Lee Benfield</authors>
    <projectUrl>http://www.benf.org/other/cfr/</projectUrl>
    <copyright>Copyright © 2011-2014 Lee Benfield</copyright>
    <licenseUrl>http://www.benf.org/other/cfr/license.html</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <tags>cfr java decompiler</tags>
    <summary>CFR is a command-line Java decompiler.</summary>
    <description>
CFR is a command-line tool to decopile Java code from class files or Jar files. CFR will decompile modern Java features - Java 8 lambdas (pre and post Java beta 103 changes), Java 7 String switches etc, but is written entirely in Java 6.

To use, simply run with the class name you want to decompile (either as a path to a class file, or as a fully qualified classname on your classpath), and optionally the method name. (`--help` to list arguments). Alternately, to decompile an entire jar, simply provide the jar path, and if you want to emit files (which you probably do!) add `--outputdir /tmp/putithere`.

See project page or [FAQ](http://www.benf.org/other/cfr/faq.html) for more details.
    </description>
    <!-- =============================== -->

    <dependencies>
      <dependency id="javaruntime" />
    </dependencies>

  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>
